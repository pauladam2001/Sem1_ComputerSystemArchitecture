     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  extern changeChar
     7                                  ; declare external functions needed by our program
     8                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import printf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ;s1 db 'ana,are,mere,eu,nu,mai,am'
    16                                      ;s1 db 'ppp,ppp,mppp,pp,pp,ppp,pp'
    17 00000000 7070702C7070                s1 db 'ppp,pp'
    18                                      ;s2 db '---,&--,&---,--,&-,&&&,--'
    19                                      ;s2 db '---,---,&---,--,--,---,--'
    20 00000006 2D2D2D2C2D2D                s2 db '---,--'
    21                                      len equ $-s2
    22 0000000C 00<rept>                    s3 times len db 0
    23 00000012 00000000                    index dd 0
    24 00000016 00<rept>                    frecv times 25 db 0
    25 0000002F 00                          max db 0
    26 00000030 257500                      format db "%u", 0
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                      
    32 00000000 BE[00000000]                    mov ESI, s1
    33 00000005 BB00000000                      mov EBX, 0
    34 0000000A B906000000                      mov ECX, len
    35 0000000F BF[0C000000]                    mov EDI, s3
    36                                          parse_s1:
    37 00000014 B800000000                              mov EAX, 0
    38 00000019 AC                                      lodsb
    39 0000001A 3C2C                                    cmp AL, ','
    40 0000001C 7425                                    je continue
    41                                                  
    42 0000001E BA00000000                              mov EDX, 0
    43 00000023 8A93[06000000]                          mov DL, [s2 + EBX]
    44 00000029 891D[12000000]                          mov dword [index], EBX
    45 0000002F 43                                      inc EBX
    46                                                  
    47 00000030 50                                      push EAX    ; c
    48 00000031 52                                      push EDX    ; op
    49 00000032 FF35[12000000]                          push dword [index] ;n
    50 00000038 E8(00000000)                            call changeChar
    51 0000003D 83C40C                                  add ESP, 4*3
    52                                                  
    53 00000040 AA                                      stosb ; in AL we will have the changed char
    54 00000041 EB02                                    jmp next
    55                                                  
    56                                                  continue:
    57 00000043 AA                                          stosb
    58 00000044 43                                          inc EBX
    59                                                      
    60                                                  next:
    61                                                  
    62 00000045 E2CD                                loop parse_s1
    63                                          
    64                                          
    65 00000047 BE[0C000000]                    mov ESI, s3
    66 0000004C B906000000                      mov ECX, len
    67                                          parse_s3:
    68 00000051 B800000000                              mov EAX, 0
    69 00000056 AC                                      lodsb
    70 00000057 3C2D                                    cmp AL, '-'
    71 00000059 7409                                    je next2
    72                                                  
    73 0000005B 2C61                                    sub AL, 'a'
    74 0000005D 8080[16000000]01                        add byte [frecv + EAX], 1 
    75                                                  
    76                                                  next2:
    77                                                  
    78 00000064 E2EB                                loop parse_s3
    79                                      
    80 00000066 BE[16000000]                    mov ESI, frecv
    81 0000006B B919000000                      mov ECX, 25
    82                                          parse_frecv:
    83 00000070 AC                                          lodsb
    84 00000071 3805[2F000000]                              cmp byte [max], AL
    85 00000077 7302                                        jae change_max
    86 00000079 EB05                                        jmp next3
    87                                                      
    88                                                      change_max:
    89 0000007B A2[2F000000]                                        mov byte [max], AL
    90                                                      
    91                                                      next3:
    92                                                
    93 00000080 E2EE                                    loop parse_frecv
    94                                                  
    95 00000082 B800000000                      mov EAX, 0
    96 00000087 A0[2F000000]                    mov AL, [max]
    97 0000008C 50                              push EAX
    98 0000008D 68[30000000]                    push format
    99 00000092 FF15[00000000]                  call [printf]
   100 00000098 83C408                          add ESP, 4*2
   101                                      
   102                                          ; exit(0)
   103 0000009B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   104 0000009D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
