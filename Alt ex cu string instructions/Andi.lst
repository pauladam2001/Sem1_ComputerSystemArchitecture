     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  
    13                                  ; Given an array A of doublewords, build two arrays of bytes:  
    14                                  ; - array B1 contains as elements the higher part of the higher words from A
    15                                  ; - array B2 contains as elements the lower part of the lower words from A
    16                                  
    17                                  segment data use32 class=data
    18 00000000 00020000F2030000DA-         A dd 512, 1010, 2010, 789
    18 00000009 07000015030000     
    19                                      lengthA equ $-A ; compute the length of the string A
    20 00000010 00<rept>                    B1 times lengthA db 0 ; reserve lengthA bytes for B1 and initialize it
    21 00000020 00<rept>                    B2 times lengthA db 0 ; reserve lengthA bytes for B1 and initialize it
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BE[00000000]                    mov ESI, A ; in DS:ESI we will store the FAR address of the string A
    27 00000005 BF[20000000]                    mov EDI, B2 ; in ES:EDI we will store the FAR address of the string B2
    28 0000000A BB00000000                      mov EBX, 0 ; we will parse string B1 also
    29 0000000F B910000000                      mov ECX, lengthA ; we will parse the elements of the string in a loop with lengthA iterations
    30 00000014 E315                            jecxz Final
    31                                          
    32                                          my_Loop:
    33 00000016 AD                                      lodsd ; the double word from the address DS:ESI (A) is loaded in EAX
    34 00000017 50                                      push EAX
    35 00000018 B800000000                              mov EAX, 0 ; clean EAX because we will pop into AX
    36 0000001D 665A                                    pop DX ; the high word of EAX
    37 0000001F 6658                                    pop AX ; the low word of EAX
    38                                                  
    39 00000021 88B3[10000000]                          mov [B1 + EBX], DH ; we put in the current position of B1 the higher part of the higher word
    40 00000027 AA                                      stosb ; store AL (the lower part of the lower word) into the byte from the address ES:EDI (B2)
    41                                                  
    42 00000028 43                                      inc EBX
    43                                                  
    44 00000029 E2EB                            loop my_Loop
    45                                          
    46                                          
    47                                          Final:
    48                                      
    49                                          ; exit(0)
    50 0000002B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000002D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
