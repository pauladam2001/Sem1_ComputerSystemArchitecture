     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf, gets               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import gets msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 496E74726F64756365-         format_string db "Introduce the sentence: ", 0
    16 00000009 207468652073656E74-
    16 00000012 656E63653A2000     
    17 00000019 257300                      format db "%s", 0
    18 0000001C 25730A0D00                  format2 db "%s", 10 ,13, 0
    19 00000021 00<rept>                    given_sentence times 100 db 0
    20 00000085 00<rept>                    new_word times 100 db 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code              ;sa se opreasca la 0  ; Read a sentence from the keyboard. For each word, obtain a new one by taking the letters in reverse order and print each new word. 
    24                                      start:
    25 00000000 68[00000000]                    push dword format_string
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add ESP, 4
    28                                          
    29 0000000E 68[21000000]                    push dword given_sentence
    30                                          ;push dword format
    31 00000013 FF15[00000000]                  call [gets]
    32 00000019 83C404                          add ESP, 4*1
    33                                          
    34                                          ;push dword given_sentence
    35                                          ;call [printf]
    36                                          ;add ESP, 4
    37                                          
    38 0000001C BE00000000                      mov ESI, 0
    39 00000021 BF00000000                      mov EDI, 0
    40                                          
    41                                          ParseTheString:
    42                                          
    43                                          Repeatt:  ; with this repeat we find the space (how long the word is_
    44 00000026 80BF[21000000]20                        cmp byte [given_sentence + EDI] , 20h ; 20h = ASCII of space
    45 0000002D 740C                                    je OutOfRepeat
    46 0000002F 80BF[21000000]00                        cmp byte [given_sentence + EDI] , 0
    47 00000036 7403                                    je OutOfRepeat
    48                                                  
    49 00000038 47                                      inc EDI
    50 00000039 EBEB                                    jmp Repeatt
    51                                          
    52                                          OutOfRepeat:
    53                                          
    54 0000003B BB00000000                      mov EBX, 0
    55 00000040 B964000000                      mov ECX, 100
    56                                          ClearTheNewWord:
    57 00000045 C683[85000000]00                                mov byte [new_word + EBX], 0
    58 0000004C 43                                              inc EBX
    59 0000004D E2F6                            loop ClearTheNewWord
    60                                          
    61 0000004F 89FB                            mov EBX, EDI
    62 00000051 29F3                            sub EBX, ESI
    63 00000053 89D9                            mov ECX, EBX  ; we put in ECX the length of the word
    64                                          
    65 00000055 89FB                            mov EBX, EDI ; we need to keep EDI
    66                                          
    67                                          ;mov ESI, given_sentence + ESI
    68                                          ;mov EDI, given_sentence + EDI
    69 00000057 4F                              dec EDI ; before the space
    70 00000058 BA00000000                      mov EDX, 0 ; with edx we parse the new_word
    71                                          Mirror:
    72 0000005D 8A87[21000000]                         mov AL, [given_sentence + EDI]
    73 00000063 8882[85000000]                         mov [new_word + EDX], AL
    74 00000069 42                                     inc EDX
    75 0000006A 4F                                     dec EDI
    76 0000006B E2F0                            loop Mirror
    77                                          
    78 0000006D 68[85000000]                    push dword new_word
    79 00000072 68[1C000000]                    push dword format2
    80 00000077 FF15[00000000]                  call [printf]
    81 0000007D 83C408                          add ESP, 4*2
    82                                          
    83 00000080 89DF                            mov EDI, EBX
    84 00000082 80BF[21000000]00                cmp byte [given_sentence + EDI], 0
    85 00000089 7408                            je finish
    86                                          
    87 0000008B 89FE                            mov ESI, EDI
    88 0000008D 46                              inc ESI ; next word, after space
    89 0000008E 83C701                          add EDI, 1
    90 00000091 EB93                            jmp ParseTheString
    91                                          
    92                                          finish:
    93                                      
    94                                          ; exit(0)
    95 00000093 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    96 00000095 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
