     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data ; A byte string S is given. Build the string D whose elements represent the sum of each two consecutive bytes of S.
    13                                                                ; S: 1, 2, 3, 4, 5, 6    ;      D: 3, 5, 7, 9, 11
    14                                  
    15 00000000 010203040506                   S db 1, 2, 3, 4, 5, 6
    16                                         l equ $-S ; compute the length of the string in l
    17 00000006 00<rept>                       D times l-1 db 0 ; reserve l-1 bytes for the destination string and initialize it  # D will always have len(S)-1
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          
    23 00000000 B905000000                      mov ECX, l - 1 ; we put the length l-1 in ECX in order to make the loop
    24 00000005 BE00000000                      mov ESI, 0
    25 0000000A E315                            jecxz Final ; Jump to Final if ECX register is 0
    26                                          
    27                                          My_Loop:                
    28 0000000C 8A86[00000000]                          mov AL, [S + ESI]
    29 00000012 0286[01000000]                          add AL, [S + ESI + 1] ; AL = the sum of two consecutive bytes of S
    30                                                  
    31 00000018 8886[06000000]                          mov [D + ESI], AL ; the current position of D = AL
    32                                                  
    33 0000001E 46                                      inc ESI
    34                                                  
    35 0000001F E2EB                            loop My_Loop
    36                                          
    37                                          Final:
    38                                        
    39                                          ; exit(0)
    40 00000021 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 00000023 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
