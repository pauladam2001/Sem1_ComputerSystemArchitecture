     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf
     6                                  extern A
     7                                  extern B
     8                                  ;A string of doublewords is given. From each of these doublewords
     9                                  ;form a new word by taking the higher byte of the higher word and the higher byte of the lower word.
    10                                  ;All these new obtained words will be stored in a word string. Then compute the number
    11                                  ;of bits of value 1 from the new formed word string and print on the screen in base 10.
    12                                  
    13                                  ;Example: If the string of doublewords is: sir dd 1234A678h, 12785634h, 1A4D3C28h, then
    14                                  ;the string of words containing the higher byte of the higher word and the higher byte of the lower
    15                                  ;word for each doublewords is: 12A6h, 1256h, 1A3Ch and the number of bits 1 from all the words
    16                                  ;of the string is: 6 + 6 + 7 = 19. The number 19 will be printed on the screen.
    17                                  
    18                                  import exit msvcrt.dll  
    19                                  import printf msvcrt.dll
    20                                  
    21                                  segment data use32 class=data
    22 00000000 78A634123456781228-         given_string dd 1234A678h, 12785634h, 1A4D3C28h
    22 00000009 3C4D1A             
    23                                      len equ ($-given_string)/4
    24 0000000C 0000<rept>                  destination_string times len dw 0
    25 00000012 00000000                    sum_bits dd 0
    26 00000016 256400                      format db "%d", 0
    27                                  segment code use32 class=code    
    28                                      start:
    29                                     
    30 00000000 6A03                        push dword len
    31 00000002 68[0C000000]                push dword destination_string
    32 00000007 68[00000000]                push dword given_string
    33 0000000C E8(00000000)                call A ; In this module we are creating the new words
    34 00000011 83C40C                      add ESP, 4*3
    35                                      
    36 00000014 6A03                        push dword len
    37 00000016 68[0C000000]                push dword destination_string
    38 0000001B E8(00000000)                call B
    39 00000020 83C408                      add ESP, 4*2
    40                                      
    41 00000023 A3[12000000]                mov [sum_bits], EAX
    42                                      
    43 00000028 FF35[12000000]              push dword [sum_bits]
    44 0000002E 68[16000000]                push dword format
    45 00000033 FF15[00000000]              call [printf]
    46 00000039 83C408                      add ESP, 4*2
    47                                      
    48 0000003C 6A00                        push dword 0
    49 0000003E FF15[00000000]              call [exit]
    50                                      
